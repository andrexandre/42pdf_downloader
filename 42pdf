#!/bin/bash

display_help() {
	echo "Usage: 42pdf NAME/ID [OPTIONS]

Instantly download/open pdf's from 42

Arguments:
 NAME/ID            The name or id of the PDF to download
 find               Find and download a PDF in the database
 pack               Shows available packs

Options:
 -h, --help         Display this help message
 -d, --download [P] Download PDF to path P
 -t, --title        Display the PDF title
 -s, --summary      Display the PDF summary
 -v, --version      Display the PDF version
 -p, --page [NUM]   Display content of page NUM"
}

check_errors() {
	script_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
	db_name=$script_dir/pdf_db.txt
	[ "$GITHUB_ACTIONS" = "true" ] && return
	[ -d "$HOME/.local/bin" ] || mkdir -p "$HOME/.local/bin"
	[[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && export PATH="$HOME/.local/bin:$PATH"

	if [ $# -gt 3 ]; then
		echo "Too many arguments"
		exit 1
	fi
	if [ -z "$1" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		display_help ; exit
	fi
	if [ -z "$DEBUG" ]; then
		cd $script_dir
		if [ "$(git status --porcelain)" ]; then
			echo "Changes exist, restoring all in 5 sec..."
			sleep 5
			git restore .
		fi
		if git status | grep -q "Your branch is behind"; then
			echo "Updates avaliable, updating..."
			git pull
			echo
		fi
		cd - > /dev/null
	else
		unset DEBUG
	fi
	if ! timeout 3 ping -c 1 google.com &> /dev/null; then
		echo "Bad internet connection"
		exit 1
	fi
	if ! command -v pdftotext &> /dev/null; then
		export list="install_cmd_rootless poppler-utils" ; curl -sL andrexandre.github.io | sh
	fi
}

fzf_search() {
	if ! command -v fzf &> /dev/null; then
		export list="install_cmd_rootless fzf" ; curl -sL andrexandre.github.io | sh
	fi
	pdf_name=$(cat $db_name | cut -d' ' -f2- | sort | uniq | fzf)
	[ -z "$pdf_name" ] && return
	download_pdf "$pdf_name" "$2"
}

download_pdf_entry() {
	for curr in $(seq -w 00 $3); do
		i=0
		while [ "$entry" != "$2$curr" ]; do
			let i=i+1
			line=$(download_pdf "$1" "-e" "$i")
			entry=$(echo $line | cut -d' ' -f2-)
			# echo Returned $1 $line
		done
		download_pdf "$(echo $line | awk '{print $1}')"
		entry=$(echo $entry | tr ' ' '-' |  tr '/' '-' | sed 's/--*/-/g')
		mv "$pdf_name.subject.pdf" "c_piscine/$pdf_name.$entry.subject.pdf"
	done
}
download_pack() {
	pack_name="$2"
	case "$pack_name" in
		"c_piscine")
			echo "This is not optimized so it may take a long time"
			echo "Downloading C piscine pack..."
			mkdir -p "c_piscine"
			download_pdf_entry "C Piscine" "Shell " "01"
			download_pdf_entry "C Piscine" "Rush " "02"
			download_pdf_entry "C Piscine" "C " "13"
			;;
		"common_core")
			echo "Downloading Common Core pack..."
			mkdir -p "common_core"
			for project in "Libft" "ft_printf" "Get Next Line" "Born2beRoot" "minitalk" \
					"pipex" "push_swap" "fdf" "fract’ol" "So Long" "philosophers" "minishell" \
					"Net_Practice" "miniRT" "cub3d" "inception" "webserv" "ft_irc" "ft_transcendence"; do
				download_pdf "$project"
				mv "$pdf_name.subject.pdf" "common_core"
			done
			;&
		"cpp_modules")
			echo "Downloading C++ Modules pack..."
			mkdir -p "cpp_modules"
			for i in {00..09}; do
				download_pdf "C++ - Module $i"
				mv "$pdf_name.subject.pdf" "cpp_modules"
			done
			if [ "$pack_name" = "common_core" ]; then
				mv "cpp_modules" "common_core"
			fi
			;;
		"mysterious")
			echo "Downloading Mysterious pack..."
			download_pdf "???"
			download_pdf "β"
			download_pdf "6/2/2023"
			;;
		"all_42_pdf")
			echo "Downloading All 42 subjects pack..."
			mkdir -p "all_42_pdf"
			all_subjects=$(cat $db_name | cut -d' ' -f2- | sort | uniq)
			echo "$all_subjects" | while read -r project; do
				download_pdf "$project"
				mv "$pdf_name.subject.pdf" "all_42_pdf"
			done
			;;
		"mlx")
			git clone git@github.com:42Paris/minilibx-linux.git
			;;
		*)
			echo "Usage: 42pdf pack <pack_name>"
			echo
			echo "Available packs:"
			echo "- cpp_modules  : C++ Modules subjects"
			echo "- common_core  : Common Core subjects"
			echo "- all_42_pdf   : Almost all 42 subjects (-1gb)" minilibx
			echo "- mysterious   : Hella sus subjects"
			echo "- mlx          : MinilibX graphics library"
			;;
	esac
}

verify_pdf() {
	if ! [[ "$1" =~ ^[0-9]+$ ]]; then
		if [ "$2" = "-e" ] && [ "$3" ]; then
			found_line_index=$(cat $db_name | cut -d' ' -f2- | grep -nwxi "$1" | tac | sed -n "$3p" | awk -F':' '{print $1}')
		else
			found_line_index=$(cat $db_name | cut -d' ' -f2- | grep -nwxi "$1" | tail -n 1 | awk -F':' '{print $1}')
		fi
		if [ -z "$found_line_index" ]; then
			echo "No pdf called $1 found"
			exit 1
		fi
		pdf_id=$(sed -n "${found_line_index}p" $db_name | awk '{print $1}')
		pdf_name=$(sed -n "${found_line_index}p" $db_name | cut -d' ' -f2- | tr ' ' '-' |  tr '/' '-' | sed 's/--*/-/g')
	else
		pdf_id=$1
	fi
	url=https://cdn.intra.42.fr/pdf/pdf/$pdf_id/en.subject.pdf
	status_code=$(curl -sfo /dev/null -w "%{http_code}\n" --head $url)
	if [ "$status_code" -ne 200 ]; then
		echo "Subject of id: $pdf_id isn't available"
		exit 1
	fi
}
download_pdf() {
	verify_pdf "$@"
	[ -z "$2" ] && open $url > /dev/null && return
	if [ "$2" = "-d" ] || [ "$2" = "--download" ]; then
		if [ "$3" ]; then
			if [ ! -d "$3" ]; then
				echo "Invalid path: $3" ; exit 1
			else
				target_path=$3
			fi
		else
			target_path=$PWD
		fi
		if [[ "$1" =~ ^[0-9]+$ ]]; then
			# echo Downloaded based on ID
			curl -sfo temp.subject.pdf $url
			pdf_name=$(pdftotext -l 1 temp.subject.pdf - | head -n 1 | tr ' ' '-' |  tr '/' '-' | sed 's/--*/-/g')
			mv temp.subject.pdf $target_path/$pdf_name.subject.pdf
		else
			# echo Downloaded based on NAME
			curl -sfo $target_path/$pdf_name.subject.pdf $url
		fi
		echo "Downloaded $pdf_name subject of id: $pdf_id"
		return
	fi
	handle_arguments "$@"
}
handle_arguments() {
	case "$2" in
		--title|-t)
			curl -sf $url | pdftotext -l 1 - - | head -n 1
			;;
		--summary|-s)
			# sed 's/.../d' removes leading/trailing whitespace and empty lines
			if curl -sf $url | pdftotext -l 1 - - | grep -q 'Version:'; then
				curl -sf $url | pdftotext -l 1 - - | sed -n '/Summary:/,/Version:/ {s/Summary://; /Version:/q; p}'\
					| sed 's/^[[:space:]]*//;s/[[:space:]]*$//;/^[[:space:]]*$/d' | tr -s '\n'
			else
				curl -sf $url | pdftotext -l 1 - - | sed -n '/Summary:/,$ {s/Summary: //; p}'\
					| sed 's/^[[:space:]]*//;s/[[:space:]]*$//;/^[[:space:]]*$/d' | tr -s '\n'
			fi
			;;
		--version|-v)
			if curl -sf $url | pdftotext -l 1 - - | grep -q 'Version:'; then
				curl -sf $url | pdftotext -l 1 - - | grep 'Version:' | cut -d' ' -f2;
			else
				echo "This pdf doesn't have version";
			fi
			;;
		--page|-p)
			if ! [[ "$3" =~ ^[0-9]+$ ]]; then
				echo "Invalid page number: $3"
				exit 1
			fi
			if [ -z "$3" ]; then
				curl -sf $url | pdftotext - -
			else
				curl -sf $url | pdftotext -f $3 -l $3 - -
			fi
			;;
		--entry|-e)
			# echo "Returns the -eTH entry for a pdf name"
			# echo "Usage: 42pdf NAME/ID -e <entry>"
			echo -n "$pdf_id "
			curl -sf $url | pdftotext -l 1 - - | sed -n "2p"
			;;
		*)
			echo "Invalid option: $2"
			display_help
			;;
	esac
}

setup_42pdf() {
	shellrc=$HOME/."$(basename "$SHELL")"rc
	cron_job="0 0 * * 0 cd $HOME/.config/42pdf_downloader && git fetch"
	# include ~/.local/bin in PATH
	if ! grep -qF '[[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && export PATH="$HOME/.local/bin:$PATH"' $shellrc; then
		echo '# include ~/.local/bin in PATH' >> $shellrc
		echo '[[ ":$PATH:" != *":$HOME/.local/bin:"* ]] && export PATH="$HOME/.local/bin:$PATH"' >> $shellrc
	fi
	[ ! -f "$HOME/.local/bin/42pdf" ] && ln_setup=no
	[ ! -d "$HOME/.config/42pdf_downloader" ] && fol_setup=no
	crontab -l | grep -qF "$cron_job" || cron_setup=no

	[ "$ln_setup" ] && ln -s "$HOME/.config/42pdf_downloader/42pdf" "$HOME/.local/bin/42pdf"
	[ "$fol_setup" ] && mv $script_dir $HOME/.config
	[ "$cron_setup" ] && (crontab -l; echo "$cron_job") | crontab -

	if [ "$ln_setup" ] && [ "$fol_setup" ] && [ "$cron_setup" ]; then
		echo
		echo 42pdf_downloader setup successfully!
		echo
		display_help
	else
		read -p "Do you want to remove 42pdf_downloader? (y/N): " choice
		if [[ "$choice" = [Yy]* ]]; then
			rm -f "$HOME/.local/bin/42pdf"
			rm -rf "$HOME/.config/42pdf_downloader"
			crontab -l | grep -vF "$cron_job" | crontab -
			echo "42pdf_downloader removed successfully!"
			echo "To set up 42pdf again run:"
			echo "git clone https://github.com/andrexandre/42pdf_downloader.git ; 42pdf_downloader/42pdf setup"
		fi
	fi
}

main() {
	case "$1" in
		# db_utils.sh functions
		update)
			update_database
			;;
		update-fast)
			update_database_super_fast
			;;
		migrate)
			migrate_database
			;;
		# main command execution functions
		rm-all)
			echo Removed *.subject.pdf
			rm -f *.subject.pdf .subject.pdf
			# rm -rf c_piscine cpp_modules common_core all_42_pdf minilibx-linux
			;;
		setup)
			setup_42pdf
			;;
		find)
			fzf_search "$@"
			;;
		pack)
			download_pack "$@"
			;;
		*)
			download_pdf "$@"
			;;
	esac
}

check_errors "$@"
source $script_dir/db_utils.sh
main "$@"
